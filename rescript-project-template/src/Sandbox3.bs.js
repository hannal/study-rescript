// Generated by ReScript, PLEASE EDIT WITH CARE


function labeledArguments(xx, y) {
  return xx + y | 0;
}

console.log(11);

function optionalArguments(x, y, param) {
  if (y !== undefined) {
    return x + y | 0;
  } else {
    return x + 10 | 0;
  }
}

var partial_arg = 6;

console.log(function (param) {
      return optionalArguments(5, partial_arg, param);
    });

console.log(function (param, param$1) {
      return optionalArguments(5, param, param$1);
    });

function signatureAndAnnotation(x, y, param) {
  if (y !== undefined) {
    return x + y | 0;
  } else {
    return x + 20 | 0;
  }
}

var payload = 10;

console.log(signatureAndAnnotation(10, payload, undefined));

function optionalWithDefault(xOpt, y, param) {
  var x = xOpt !== undefined ? xOpt : 1;
  return x + y | 0;
}

var partial_arg$1 = 10;

console.log(function (param) {
      return optionalWithDefault(partial_arg$1, 20, param);
    });

console.log(function (param) {
      return function (param$1) {
        return optionalWithDefault(param, 20, param$1);
      };
    });

function listHas(_list, item) {
  while(true) {
    var list = _list;
    if (!list) {
      return false;
    }
    if (list.hd === item) {
      return true;
    }
    _list = list.tl;
    continue ;
  };
}

console.log(listHas({
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }, 4));

function add1(a, b) {
  return a + b | 0;
}

function curriedAdd(param) {
  return 1 + param | 0;
}

console.log(3);

function add2(a, b) {
  return a + b | 0;
}

console.log(add2(10, 20));

export {
  labeledArguments ,
  optionalArguments ,
  signatureAndAnnotation ,
  payload ,
  optionalWithDefault ,
  listHas ,
  add1 ,
  curriedAdd ,
  add2 ,
  
}
/*  Not a pure module */
